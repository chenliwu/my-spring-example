<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
             http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
    </bean>

    <!-- 凭证匹配器 -->
    <!--    <bean id="credentialsMatcher" class="com.github.zhangkaitao.shiro.chapter12.credentials.RetryLimitHashedCredentialsMatcher">-->
    <!--        <constructor-arg ref="cacheManager"/>-->
    <!--        <property name="hashAlgorithmName" value="md5"/>-->
    <!--        <property name="hashIterations" value="2"/>-->
    <!--        <property name="storedCredentialsHexEncoded" value="true"/>-->
    <!--    </bean>-->
    <!-- 配置凭证匹配器 -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"></property>
        <property name="hashIterations" value="2"></property>
    </bean>

    <!-- 自定义的凭证匹配器-->
    <bean id="myShiroCredentialsMatcher" class="com.chenlw.java.web.utils.shiro.MyShiroCredentialsMatcher">

    </bean>

    <!-- Realm实现 -->
    <bean id="shiroDataBaseRealm" class="com.chenlw.java.web.utils.shiro.ShiroDataBaseRealm">
        <property name="credentialsMatcher" ref="myShiroCredentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>


    <!--  自定义单点登录realm   -->

    <!-- 自定义的凭证匹配器-->
    <bean id="encryptionCredentialsMatcher"
          class="com.chenlw.java.web.utils.shiro.encryption.EncryptionCredentialsMatcher">

    </bean>

    <!-- Realm实现 -->
    <bean id="encryptionSsoRealm" class="com.chenlw.java.web.utils.shiro.encryption.EncryptionSsoRealm">
        <property name="credentialsMatcher" ref="encryptionCredentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!--  自定义单点登录realm   -->


    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator"
          class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <!-- 会话DAO -->
    <bean id="sessionDAO"
          class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

    <!--
        重写sessionIdCookie.name，解决每次重新请求重新生成session问题。
        重新生成session后会导致shiro无法成功登录，即使通过shiro的身份验证，也会重新跳转到登录页面，因为session每次都是重新生成的，
        因而shiro认为该session没有登录，所以会跳转到登录页面。
      -->
    <bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- <property name="sessionValidationScheduler" ref="shiroSessionValidationScheduler"/> -->
        <property name="sessionValidationInterval" value="1800000"/>  <!-- 相隔多久检查一次session的有效性 -->
        <property name="globalSessionTimeout" value="1800000"/>  <!-- session 有效时间为半小时 （毫秒单位）-->
        <!--        <property name="sessionIdCookie.domain" value=".xxx.com"/>-->
        <property name="sessionIdCookie.name" value="jsid"/>
        <property name="sessionIdCookie.path" value="/"/>
    </bean>


    <!-- 安全管理器 org.apache.shiro.web.mgt.DefaultWebSecurityManager -->
    <!--    <bean id="securityManager" class="org.apache.shiro.mgt.DefaultSecurityManager">-->
    <!--        <property name="realms">-->
    <!--            <list>-->
    <!--                <ref bean="shiroDataBaseRealm"/>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="sessionManager" ref="sessionManager"/>-->
    <!--        <property name="cacheManager" ref="cacheManager"/>-->
    <!--    </bean>-->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager ">
        <property name="realms">
            <list>
                <ref bean="shiroDataBaseRealm"/>
                <ref bean="encryptionSsoRealm"/>
            </list>
        </property>
        <property name="sessionManager" ref="shiroSessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 基于Form表单的身份验证过滤器 -->
    <!--    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">-->
    <!--        <property name="usernameParam" value="username"/>-->
    <!--        <property name="passwordParam" value="password"/>-->
    <!--        &lt;!&ndash; loginUrl 配置表单提交的地址 &ndash;&gt;-->
    <!--        <property name="loginUrl" value="/userLogin"/>-->
    <!--    </bean>-->
    <bean id="formAuthenticationFilter" class="com.chenlw.java.web.utils.shiro.filter.CustomFormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <!-- loginUrl 配置表单提交的地址 -->
        <property name="loginUrl" value="/userLogin"/>
        <property name="successUrl" value="/index"/>
    </bean>


    <!--  自定义单点登录filter -->
    <bean id="encryptionSsoAuthenticationFilter"
          class="com.chenlw.java.web.utils.shiro.encryption.EncryptionSsoAuthenticationFilter">
        <property name="loginUrl" value="/userLogin"/>
        <property name="successUrl" value="/index"/>
    </bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登陆页面 -->
        <property name="loginUrl" value="/loginPage"/>
        <!-- 登陆成功后的一面 -->
        <property name="successUrl" value="/index"/>
        <!--未授权页面-->
        <property name="unauthorizedUrl" value="/unauthorizedPage"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="enSsoFilter" value-ref="encryptionSsoAuthenticationFilter"/>
            </util:map>
        </property>
        <!--        /*-->
        <!--        * anon  无需认证-->
        <!--        * authc  必须认证-->
        <!--        * user  使用rememberme功能可以直接访问-->
        <!--        * perms 资源授权-->
        <!--        * role 校色授权-->
        <!--        * */-->
        <!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截.  -->
        <property name="filterChainDefinitions">
            <value>
                /static/** = anon
                /page/** = anon
                /test/** = anon
                /unauthorized/* = anon
                /userLogin = authc
                /loginPage = anon
                /logout = logout
                /error/** = anon
                /hq/** = anon
                /enSso = enSsoFilter
                /** = user
            </value>
        </property>
    </bean>


</beans>
